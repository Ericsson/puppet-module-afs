#! /bin/bash
#
# Copyright (c) 2018 AFS-Core Ericsson
# Version v1.18, 2018-10-01
#
# System startup script for OpenAFS
#
### BEGIN INIT INFO
# chkconfig: 2345 50 50
# Provides:       afs-client
# Required-Start: $local_fs $named $network $remote_fs
# Should-Start:   $syslog
# Should-Stop:    $null
# Required-Stop:  $null
# Default-Start:  3 5
# Default-Stop:   0 2 1 6
# Short-Description: Start OpenAFS Client
# Description: Starts the OpenAFS Client by loading the required kernel-module and starting afsd.
### END INIT INFO

DAEMON="OpenAFS Client"
SUPPORTS_HUP="no"
DAEMON_BIN=/usr/sbin/afsd
AFS_KERNEL_MODULE=libafs
AFS=/afs
CACHEDIR=/var/cache/openafs
DEFAULTCELL="sunrise.ericsson.se"
SUIDCELLS=/etc/openafs/SuidCells
LOCKFILE="/var/lock/$(basename $0)"
LOCKFD=99

PATH=/sbin:/bin:/usr/bin:/usr/sbin
export PATH

#test -x $DAEMON_BIN || exit 5

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num><num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

[ -f /etc/sysconfig/openafs-client ] && . /etc/sysconfig/openafs-client

# Set the minimum required options for afsd if no options set in /etc/sysconfig/openafs-client
AFSD_ARGS=${AFSD_ARGS:-"-dynroot -afsdb -nosettime"}
UPDATE=${UPDATE:-"false"}
CLEANCACHE=${CLEANCACHE:-"false"}

noroot_check() {
  if [ "$(whoami | awk '{print $1}' | cut -f2 -d\!)" != "root" ]; then
    return 0
  else
    return 1
  fi
}

# Lock
lock_routine() {
  if { flock -h; } >/dev/null 2>&1; then
    # Older versions of flock do not support -x option
    flock -x 1>/dev/null 2>/dev/null
    if [ $? -ne 1 ]; then
      _lock() { flock -$1 $LOCKFD; }
      _no_more_locking() {
        _lock u
        _lock xn && rm -f $LOCKFILE
      }
      _prepare_locking() {
        eval "exec $LOCKFD>\"$LOCKFILE\""
        trap _no_more_locking EXIT
      }
      exlock_now() { _lock xn; } # obtain an exclusive lock immediately or fail
      exlock() { _lock x; }      # obtain an exclusive lock
      shlock() { _lock s; }      # obtain a shared lock
      unlock() { _lock u; }      # drop a lock
      _prepare_locking
      return 0
    fi
  else
    return 1
  fi
}

setsuid() {
  if [ -f $SUIDCELLS ]; then
    for CELLS in $(grep '^[^#]' $SUIDCELLS); do
      echo "Setting $CELLS suid"
      fs setcell -cell $CELLS -suid
    done
  fi
}

setnocrypt() {
  fs setcrypt -crypt off
}

firstint() {
  sed 's/^[^0-9]*//; s/[^0-9].*//'
}

get_cell() {
  CELL=$(fs wscell 2>/dev/null | sed -e "s/.*to cell '\(.*\)'/\1/")
  if [ -z "$CELL" ]; then
    CELL="$DEFAULTCELL"
  fi
}

setsysname() {
  _ARCH=$(uname -i | sed 's/x86_64/amd64/')
  _DIST=""
  _VER=""

  if [ -f "/etc/debian_version" ]; then
    if [ -f /etc/lsb-release ]; then
      _DIST=$(awk -F= '$1=="DISTRIB_ID" {print $2}' /etc/lsb-release)
      _VER=$(awk -F= '$1=="DISTRIB_RELEASE" {print $2}' /etc/lsb-release | firstint)
    fi
    [ -n "$_DIST" ] ||
      _DIST=$(lsb_release -d | awk '/Description/ {print $2}')
    [ -n "$_VER" ] ||
      _VER=$(lsb_release -d | awk '/Description/ {print $3}' | firstint)
  fi
  for d in novell SuSE fedora redhat centos; do
    if [ -f "/etc/$d-release" ]; then
      _DIST=$d
      _VER=$(rpm -qf --qf '%{version}\n' /etc/${_DIST}-release | firstint)
      break
    fi
  done
  case "$_DIST" in
  novell | SuSE)
    if grep -qi openSUSE /etc/${_DIST}-release; then
      _DIST="osuse"
    else
      _DIST="sle"
    fi
    ;;
  redhat | centos)
    _DIST="rhel"
    ;;
  fedora)
    _DIST="fc"
    ;;
  Ubuntu)
    _DIST="ubunt"
    ;;
  *)
    return
    ;;
  esac

  # Sysname list.  The order here is from specific to general, with a
  # fallback to the compiled-in value from sys.  This will be
  # used as the sysname search path.
  if { SYS=$(sys); } >/dev/null 2>&1; then
    if [ -n "$_VER" ]; then
      SYSNAMELIST="${_ARCH}_${_DIST}${_VER} $SYS"
    fi
  fi

  # Set the sysname
  if [ -n "$SYSNAMELIST" ]; then
    SYSNAME=$(echo "$SYSNAMELIST" | awk 'BEGIN {ORS=" "} { for (i=1;i<=NF;i+=1) print "-newsys",$i }')
    _CMD="fs sysname $SYSNAME"
    echo "Setting sysname: $SYSNAMELIST"
    $_CMD >/dev/null
  fi
}

killafs() {
  SIGNAL=$1
  PIDS=$(lsof -Fp $AFS | sed -e 's/p//')
  if [ "x" != "x$PIDS" ]; then
    kill -$SIGNAL $PIDS >/dev/null 2>&1
    sleep 3
  fi
}

check_kernelmodule() {
  modprobe --allow-unsupported-modules -V $AFS_KERNEL_MODULE >/dev/null 2>&1
  RETVAL=$?
  if [ $RETVAL -eq 0 ]; then
    MODPROBEOPT="--allow-unsupported-modules"
  else
    MODPROBEOPT=""
  fi
  modprobe $MODPROBEOPT $AFS_KERNEL_MODULE >/dev/null 2>&1
  RETVAL=$?
  [ $RETVAL -eq 0 ] && return 0 # Kernel module loaded, continue...
  echo -n "Attempting to recompile kernel module..."
  if lock_routine; then
    exlock_now || {
      echo
      echo " -> Lock-file $LOCKFILE exists! Will exit now."
      exit 1
    }
  fi
  echo
  KERNEL_VERSION=$(uname -r)
  KMOD_BUILDLOG=/tmp/openafs-kmod-build-$(date +%Y%m%d-%H%M).log
  echo "Build log for OpenAFS module: $(date)" >$KMOD_BUILDLOG
  if [ -d /usr/src/kernel-modules/openafs/libafs_tree ]; then
    cd /usr/src/kernel-modules/openafs/libafs_tree || return 1
    make clean >>$KMOD_BUILDLOG 2>&1
    ./configure --with-linux-kernel-headers=/lib/modules/$KERNEL_VERSION/build >>$KMOD_BUILDLOG 2>&1
    make -j4 >>$KMOD_BUILDLOG 2>&1
    if [ $? -eq 0 ]; then
      MODULEDIR=/lib/modules/$KERNEL_VERSION/kernel/fs/openafs
      if [ -d $MODULEDIR ]; then # Clean out any occurance of old modules.
        rm -rf $MODULEDIR
      fi
      mkdir $MODULEDIR
      cp src/libafs/MODLOAD-$KERNEL_VERSION-*/libafs.ko $MODULEDIR/libafs.ko
      ln $MODULEDIR/libafs.ko $MODULEDIR/openafs.ko
      depmod -a >>$KMOD_BUILDLOG 2>&1
      modprobe $MODPROBEOPT $AFS_KERNEL_MODULE >>$KMOD_BUILDLOG 2>&1
      RETVAL=$?
    else
      RETVAL=1
    fi
    echo
    [ $RETVAL -eq 0 ] && rm -f $KMOD_BUILDLOG && echo "Build succeded!" && return 0
    echo
    echo "Failed to build kernel module."
    echo -n "See $KMOD_BUILDLOG for more details."
    return 1
  else
    echo
    echo -n "OpenAFS Kernel source not installed."
    return 1
  fi
}

rm_wrong_module() {
  module="$(modinfo -F filename $AFS_KERNEL_MODULE 2>/dev/null)"
  if [ -f "$module" ]; then
    mod_version=$(strings $module | awk '/OpenAFS/ {sub("^.*OpenAFS\\s*",""); print $1}')
    pkg_version=$(fs --version | awk '{print $2}')
    if [ "$mod_version" != "$pkg_version" ]; then
      rm "$module"
      echo "Removed libafs.ko, version mismatch: $mod_version <-> $pkg_version"
    fi
  fi
}

package_update() {
  if [ "$UPDATE" == "true" ]; then
    echo "Checking for OpenAFS updates.."
    if lock_routine; then
      exlock_now || {
        echo
        echo " -> Lock-file $LOCKFILE exists! Will exit now."
        exit 1
      }
    fi
    echo
    zypper --no-gpg-checks refresh
    package_status=$(zypper --no-gpg-checks info openafs 2>/dev/null | grep ^Status | awk '{print $2}')
    if [ "$package_status" == "out-of-date" ]; then
      echo "Upgrading OpenAFS"
      zypper -q -V >/dev/null 2>&1
      RETVAL=$?
      if [ $RETVAL -eq 0 ]; then
        ZYPPEROPTS="-q"
      else
        ZYPPEROPTS=""
      fi
      zypper --no-gpg-checks $ZYPPEROPTS -n in openafs openafs-docs openafs-krb5-mit openafs-client openafs-kernel-source 2>/dev/null
      if [ "$CLEANCACHE" != "true" ]; then
        if [ "${CACHEDIR}" == "/usr/vice/cache" ] || [ "${CACHEDIR}" == "/var/cache/openafs" ]; then
          if [ -d ${CACHEDIR} ]; then
            echo "Cleaning up cache area ${CACHEDIR}/ ..."
            rm -rf ${CACHEDIR:?}/*
          fi
        else
          echo "Cache area CACHEDIR ${CACHEDIR} not set correctly for cleanup-job in startup-script."
        fi
      fi
    fi
  fi
}

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
start)
  if noroot_check; then
    echo "Script has to be run as root"
    exit 4
  fi
  echo "Starting $DAEMON "
  mkdir -p $AFS
  if grep -q ^$AFS_KERNEL_MODULE /proc/modules; then
    echo -n "  -> $DAEMON already running "
  else
    # A configured zypper repository is needed for the package-update
    package_update
    rm_wrong_module
    if check_kernelmodule; then
      ps ax | grep -q '\[afsd\]'
      if [ $? -ne 0 ]; then
        if [ "$CLEANCACHE" == "true" ]; then
          if [ "${CACHEDIR}" == "/usr/vice/cache" ] || [ "${CACHEDIR}" == "/var/cache/openafs" ]; then
            if [ -d ${CACHEDIR} ]; then
              echo "Cleaning up cache area ${CACHEDIR}/ ..."
              rm -rf ${CACHEDIR:?}/*
            fi
          else
            echo "Cache area CACHEDIR ${CACHEDIR} not set correctly for cleanup-job in startup-script."
          fi
        fi
        $DAEMON_BIN $AFSD_ARGS
        RETVAL=$?
        if [ $RETVAL -eq 0 ]; then
          setsysname
          setsuid
          setnocrypt
          get_cell
          SETSERVERPREFS=/afs/$CELL/afsadm/sbin/afs_setserverprefs.sh
          # background job that should run after the AFS initialization...
          (
            sleep 60
            [ -x $SETSERVERPREFS ] && $SETSERVERPREFS
          ) </dev/null >/dev/null 2>&1 &
        else
          rc_failed 1
        fi
      fi
    else
      #modprobe failed
      rc_failed 5
    fi
  fi
  # Remember status and be verbose
  rc_status -v
  ;;
stop)
  if noroot_check; then
    echo "Script has to be run as root"
    exit 4
  fi
  echo -n "Shutting down $DAEMON "
  if ps ax | grep -q '\[afsd\]'; then
    umount $AFS
    RETVAL=$?
    if [ $RETVAL -eq 0 ]; then
      $DAEMON_BIN -shutdown
    fi
  else
    echo -n " -> $DAEMON not running "
    RETVAL=0
  fi
  if [ $RETVAL -eq 0 ]; then
    if grep -q ^$AFS_KERNEL_MODULE /proc/modules; then
      rmmod $AFS_KERNEL_MODULE || rc_failed 1
    fi
  else
    rc_failed 1
  fi
  # rmtsys doesn't go away, so kill them all to be sure
  #killall $DAEMON_BIN > /dev/null 2>&1
  # Remember status and be verbose
  rc_status -v
  ;;
stop-force)
  if noroot_check; then
    echo "Script has to be run as root"
    exit 4
  fi
  echo -n "Shutting down $DAEMON "
  if ps ax | grep -q '\[afsd\]'; then
    echo
    echo "Sending all processes using $AFS the TERM signal ..."
    killafs TERM
    echo "Sending all processes using $AFS the KILL signal ..."
    killafs KILL
    umount $AFS
    $DAEMON_BIN -shutdown
  fi
  if grep -q ^$AFS_KERNEL_MODULE /proc/modules; then
    rmmod $AFS_KERNEL_MODULE || rc_failed 1
  fi
  # rmtsys doesn't go away, so kill them all to be sure
  #killall $DAEMON_BIN > /dev/null 2>&1
  # Remember status and be verbose
  rc_status -v
  ;;
try-restart)
  ## Stop the service and if this succeeds (i.e. the
  ## service was running before), start it again.
  $0 stop && $0 start

  # Remember status and be quiet
  rc_status
  ;;
restart)
  ## Stop the service and regardless of whether it was
  ## running or not, start it again.
  $0 stop
  $0 start

  # Remember status and be quiet
  rc_status
  ;;
status)
  echo -n "Checking for $DAEMON: "
  ## Check status with checkproc(8), if process is running
  ## checkproc will return with exit status 0.

  # Status has a slightly different for the status command:
  # 0 - service running
  # 1 - service dead, but /var/run/  pid  file exists
  # 2 - service dead, but /var/lock/ lock file exists
  # 3 - service not running

  # NOTE: checkproc returns LSB compliant status values.

  ps ax | grep -q '\[afsd\]' || rc_failed 3

  rc_status -v
  ;;
check)
  echo -n "Checking $DAEMON "
  if ps ax | grep -q '\[afsd\]'; then
    get_cell
    HEALTHCHECK=/afs/$CELL/afsadm/bin/afs_site_health_check.sh
    if [ -x $HEALTHCHECK ]; then
      $HEALTHCHECK
    else
      echo -n $"Check-script not available: $HEALTHCHECK"
      echo
      RETVAL=1
    fi
  else
    echo -n " -> $DAEMON not running "
    RETVAL=0
  fi
  ;;
*)
  echo "Usage: $0 {start|stop|stop-force|status|check|try-restart|restart}"
  exit 1
  ;;
esac
rc_exit
