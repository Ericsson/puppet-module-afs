#!/bin/sh
#
# Copyright (c) 2016 AFS-Core Ericsson
# Version v1.9, 2016-03-11
#
# openafs-client  Start/Stop the OpenAFS Client
# rc script for AFS on Solaris 8/9/10/11 or OpenSolaris-based platforms
#
#

DAEMON="OpenAFS Client"
DAEMON_BIN=/usr/vice/etc/afsd
CONFIG=/usr/vice/etc/sysconfig
AFSDOPT=$CONFIG/openafs-client
AFS=/afs
DEFAULTCELL="sunrise.ericsson.se"
SUIDCELLS=/usr/vice/etc/SuidCells
DRVFS=""
TRUE=0
FALSE=1

[ -f $AFSDOPT ] && . $AFSDOPT

# Set the minimum required options for afsd if no options set in $AFSDOPT
AFSD_ARGS=${AFSD_ARGS:-"-dynroot -afsdb -nosettime"}

# Need the commands pgrep, awk, fs
PATH=/sbin:/bin:/usr/bin:/usr/sbin:/usr/proc/bin:/usr/afsws/bin:/usr/afsws/etc:/usr/afs/bin:/usr/afs/etc:/opt/afssw/bin:/opt/afssw/etc:/usr/afsw/bin:/usr/afsw/sbin:/usr/afsw/etc:/usr/vice/bin:/usr/vice/etc
export PATH

noroot_check() {
  if [ "`whoami | awk '{print $1}' | cut -f2 -d\!`" != "root" ]; then
    return 0
  else
    return 1
  fi
}

setsuid() {
  if [ -f $SUIDCELLS ]; then
    for CELLS in `grep '^[^#]' $SUIDCELLS`; do
      echo "Setting $CELLS suid"
      fs setcell -cell $CELLS -suid
    done
  fi
}

get_cell() {
  CELL=`fs wscell 2>/dev/null | sed -e "s/.*to cell '\(.*\)'/\1/"`
  if [ -z "$CELL" ]; then
    CELL="$DEFAULTCELL"
  fi
}

setsysname() {
  if { SYS=`sys`; } >/dev/null 2>&1; then
    ADDSYS=`echo "$SYS" | sed -n 's/_511$/_510/p'`
    if [ -n "$ADDSYS" ]; then
      echo "Setting sysname: $SYS $ADDSYS"
      fs sysname "$SYS" "$ADDSYS" >/dev/null
    fi
  fi
}

chkafsd() {
  if pgrep -u 0 -x afsd >/dev/null; then
    return ${TRUE}
  else
    return ${FALSE}
  fi
}

issol11() {
  case `uname -r` in
    5.?|5.10) return ${FALSE};;
    5.??) return ${TRUE};;
  esac
  echo "unsupported OS"
  exit 1
}

case $1 in
  'start')
	  if noroot_check; then
	    echo "Script has to be run as root"
	    exit 1
	  fi
    # Not starting afsd on containers (non global zone)
    if uname -v | grep Virtual >/dev/null || { zonename; } 2>/dev/null | fgrep -vx global >/dev/null; then
      echo "Solaris Non-Global Zone: afsd will not start and is not needed !"
      exit
    fi
    
    if issol11; then
      DRVFS=drv
    else
      DRVFS=fs
      #
      # Make sure afs exists in /etc/name_to_sysnum
      #
      if grep -s "afs" /etc/name_to_sysnum > /dev/null; then
        echo "Entry for afs already exists in /etc/name_to_sysnum"
      else
        echo "Creating entry for afs in /etc/name_to_sysnum"
        cp /etc/name_to_sysnum /etc/name_to_sysnum.orig
        sed '/nfs/i\
    afs     65' /etc/name_to_sysnum > /tmp/name_to_sysnum
        mv /tmp/name_to_sysnum /etc/name_to_sysnum
        echo "Reboot the system now for new /etc/name_to_sysnum to take effect"
        #reboot
      fi
    fi
    
    ## Check to see that /bin/isalist exists and is executable
    if { ! isalist; } >/dev/null 2>&1; then
      echo "isalist not available"
      exit 1;
    fi
    
    ## Determine if we are running the 64 bit OS
    ## If sparcv9 then the location of the afs and nfs extensions differ
    
    case `isalist` in
      *amd64* )
        nfssrv=/kernel/misc/amd64/nfssrv
        afs=/kernel/$DRVFS/amd64/afs ;;
      *sparcv9* )
        nfssrv=/kernel/misc/sparcv9/nfssrv
        afs=/kernel/$DRVFS/sparcv9/afs ;;
      * )
        nfssrv=/kernel/misc/nfssrv
        afs=/kernel/$DRVFS/afs ;;
    esac
    
    
    #
    # Load kernel extensions
    #
    # nfssrv has to be loaded first
    
    
    if [ -f $nfssrv ]; then
      echo "Loading NFS server kernel extensions"
      modload $nfssrv
    else
      echo "$nfssrv does not exist. Skipping AFS startup."
      exit 1
    fi
    
    ## Load AFS kernel extensions
    
    if [ -f $afs ]; then
      echo "Loading AFS kernel extensions"
      if issol11; then
        if [ -f /kernel/drv/afs.conf ] ; then
          echo "Kernel afs.conf already exists"
        else
          echo "Creating kernel afs.conf"
          echo 'name="afs" parent="pseudo";' > /kernel/drv/afs.conf
        fi
        # load the module
        if grep '^afs ' /etc/name_to_major >/dev/null ; then
          echo "Loading AFS kernel extensions"
          modload $afs
          # this can sometimes be necessary to get the /devices afs device to attach
          update_drv afs
        else
          echo "Installing AFS driver and loading kernel extensions"
          add_drv -m '* 0666 root root' afs
        fi
        
        # Create the /dev/afs link
        if grep name=afs /etc/devlink.tab >/dev/null ; then
          echo "Entry for afs already exists in /etc/devlink.tab"
        else
          echo "Adding entry for afs in /etc/devlink.tab"
          print "type=ddi_pseudo;name=afs;addr=0;minor=afs\t\D" >> /etc/devlink.tab
          devfsadm
        fi
      else
        modload $afs
      fi
    else
      echo "$afs does not exist. Skipping AFS startup."
      exit 1
    fi
    
    #
    # Check that all of the client configuration files exist
    #
    
    for file in /usr/vice/etc/afsd /usr/vice/etc/cacheinfo \
      /usr/vice/etc/ThisCell /usr/vice/etc/CellServDB
    do
      if [ ! -f ${file} ]; then
        echo "${file} does not exist. Not starting AFS client."
        exit 1
      fi
    done
    
    #
    # Check that the root directory for AFS (/afs) 
    # and the cache directory (/usr/vice/cache) both exist
    #
    
    for dir in `awk -F: '{print $1, $2}' /usr/vice/etc/cacheinfo`
    do
      if [ ! -d ${dir} ]; then
        echo "${dir} does not exist. Not starting AFS client."
        exit 2
      fi
    done
    
    echo "Starting $DAEMON "
    if chkafsd; then
      echo " -> already running"
    else
      $DAEMON_BIN $AFSD_ARGS
      RETVAL=$?
      if [ $RETVAL -eq 0 ]; then
        setsuid
        if issol11; then
          setsysname
        fi
        get_cell
        SETSERVERPREFS=/afs/$CELL/afsadm/sbin/afs_setserverprefs.sh
        # background job that should run after the AFS initialization...
        (sleep 60; [ -x $SETSERVERPREFS ] && $SETSERVERPREFS) </dev/null >/dev/null 2>&1 &
      fi
    fi

    echo ;;

  'stop')

    #
    # Stop the AFS client
    # Note that the afsd processes cannot be killed
    #
		if noroot_check; then
		  echo "Script has to be run as root"
		  exit 1
		fi
    echo "Stopping openafs-client: "
    if chkafsd; then
      umount $AFS
      RETVAL=$?
      echo
      if [ $RETVAL -eq 0 ] ; then
        $DAEMON_BIN -shutdown
        MODID=`modinfo -c | awk '/ afs / {print $1}'`
        modunload -i $MODID
        RETVAL=$?
        if [ $RETVAL -eq 0 ] ; then
          echo "Kernel module afs unloaded "
        else
          echo "Problems to unload kernel module "
        fi
      fi
    else
      echo " -> $DAEMON not running"
    fi
    echo ;;

  'check')
    #
    # Check the running AFS client
    #
    
    echo "Checking openafs-client: "
    if chkafsd; then
      get_cell
      HEALTHCHECK=/afs/$CELL/afsadm/bin/afs_site_health_check.sh
      if [ -f $HEALTHCHECK ]; then
        $HEALTHCHECK
      else
        echo "Check-script not available: $HEALTHCHECK"
      fi
    else
      echo "Cannot check openafs-client: not running"
    fi
    echo ;;
    
  *)
	  echo "Usage: $0 {start|stop|check}"
    exit 1;;
esac
