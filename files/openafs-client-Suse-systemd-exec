#!/bin/bash
#
# Copyright (c) 2020 AFS-Core Ericsson
# Version v1.23, 2020-07-15
#
# systemd-exec.openafs-client   native system exec-script
#

DAEMON="OpenAFS Client"
DAEMON_BIN=/usr/sbin/afsd
AFS_KERNEL_MODULE=libafs
AFS=/afs
CACHEDIR=/var/cache/openafs
DEFAULTCELL="sunrise.ericsson.se"
SUIDCELLS=/etc/openafs/SuidCells
LOCKFILE="/var/lock/$(basename $0)"
LOCKFD=99

PATH=/sbin:/bin:/usr/bin:/usr/sbin
export PATH

#test -x $DAEMON_BIN || exit 5

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num><num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

[ -f /etc/sysconfig/openafs-client ] && . /etc/sysconfig/openafs-client

# Set the minimum required options for afsd if no options set in /etc/sysconfig/openafs-client
AFSD_ARGS=${AFSD_ARGS:-"-dynroot -afsdb"}
UPDATE=${UPDATE:-"false"}
CHKKERNELPACK=${CHKKERNELPACK:-"true"}
CLEANCACHE=${CLEANCACHE:-"false"}

noroot_check() {
  if [ "$(whoami | awk '{print $1}' | cut -f2 -d\!)" != "root" ]; then
    return 0
  else
    return 1
  fi
}

# Lock
lock_routine() {
  if { flock -h; } >/dev/null 2>&1; then
    # Older versions of flock do not support -x option
    flock -x 1>/dev/null 2>/dev/null
    if [ $? -ne 1 ]; then
      _lock() { flock -$1 $LOCKFD; }
      _no_more_locking() {
        _lock u
        _lock xn && rm -f $LOCKFILE
      }
      _prepare_locking() {
        eval "exec $LOCKFD>\"$LOCKFILE\""
        trap _no_more_locking EXIT
      }
      exlock_now() { _lock xn; } # obtain an exclusive lock immediately or fail
      exlock() { _lock x; }      # obtain an exclusive lock
      shlock() { _lock s; }      # obtain a shared lock
      unlock() { _lock u; }      # drop a lock
      _prepare_locking
      return 0
    fi
  else
    return 1
  fi
}

setsuid() {
  if [ -f $SUIDCELLS ]; then
    while read -r CELLS; do
      echo "Setting $CELLS suid"
      fs setcell -cell $CELLS -suid
    done <<<"$(grep '^[^#]' $SUIDCELLS)"
  fi
}

setnocrypt() {
  fs setcrypt -crypt off
}

firstint() {
  sed 's/^[^0-9]*//; s/[^0-9].*//'
}

get_cell() {
  CELL=$(fs wscell 2>/dev/null | sed -e "s/.*to cell '\(.*\)'/\1/")
  if [ -z "$CELL" ]; then
    CELL="$DEFAULTCELL"
  fi
}

get_dist_release() {
  if LsbDistributor=$(lsb_release -si 2>/dev/null); then
    LsbDescription=$(lsb_release -sd)
    LsbRelease=$(lsb_release -sr | cut -d . -f -2)
    case $LsbDistributor in
      "SUSE"*)
        if [[ $LsbDescription == *openSUSE* ]]; then
          OS="openSuse"
          _DIST="osuse"
        else
          OS=$(echo "$LsbDescription" | cut -f1-4 -d" " | sed -e 's/\([a-zA-Z]\)[^ ]* */\1/g' -e 's/"//')
          _DIST="sle"
          if [[ $LsbRelease != *.* ]]; then
            patchlevel=$(awk '/^PATCHLEVEL/ {print $3}' /etc/SuSE-release 2>/dev/null)
            LsbRelease=${LsbRelease}.${patchlevel:-0}
          fi
        fi
        ;;
      "RedHatEnterprise"* | "CentOS"*)
        OS="RedHat"
        _DIST="rhel"
        ;;
      "Ubuntu"*)
        OS="Ubuntu"
        _DIST="ubunt"
        ;;
      "Debian"*)
        OS="Debian"
        _DIST="deb"
        ;;
      "Fedora"*)
        _DIST="fc"
        ;;
      *)
        echo "Distribution not detected or not supported"
        return
        ;;
    esac
    Release="${LsbRelease}"
  elif [ -f /etc/redhat-release ]; then
    Release=$(
      sed -n '
      /Red Hat Enterprise /{s/^[^0-9]*\([0-9]\{1,\}[.]\{0,1\}[0-9]*\).*/\1/p;q;}
      /CentOS /{s/^[^0-9]*\([0-9]\{1,\}[.]\{0,1\}[0-9]*\).*/\1/p;q;}
    ' /etc/redhat-release
    )
    OS="RedHat"
    _DIST="rhel"
  fi
}

setsysname() {
  _ARCH=$(uname -i | sed 's/x86_64/amd64/')
  _DIST=""
  _VER=""

  get_dist_release
  case "$_DIST" in
    fc | deb)
      return
      ;;
  esac
  _VER=$(echo "$Release" | firstint)
  # Sysname list.  The order here is from specific to general, with a
  # fallback to the compiled-in value from sys.  This will be
  # used as the sysname search path.
  if { SYS=$(sys); } >/dev/null 2>&1; then
    if [ -n "$_VER" ]; then
      SYSNAMELIST="${_ARCH}_${_DIST}${_VER} $SYS"
    fi
  fi

  # Set the sysname
  if [ -n "$SYSNAMELIST" ]; then
    SYSNAME=$(echo "$SYSNAMELIST" | awk 'BEGIN {ORS=" "} { for (i=1;i<=NF;i+=1) print "-newsys",$i }')
    _CMD="fs sysname $SYSNAME"
    echo "Setting sysname: $SYSNAMELIST"
    $_CMD >/dev/null
  fi
}

killafs() {
  SIGNAL=$1
  PIDS=$(lsof -Fp $AFS | sed -e 's/p//')
  if [ -n "$PIDS" ]; then
    kill -$SIGNAL $PIDS >/dev/null 2>&1
    sleep 3
  fi
}

check_kernelpackages() {
  KERNEL_VERSION="$1"
  # Output from `uname -r` does not match package version. Get it by checking vmlinuz image
  KERNEL_PKG=$(rpm -qf /boot/vmlinuz-${KERNEL_VERSION})
  KERNEL_PKG_VERSION=$(rpm -q --queryformat '%{version}-%{release}' "${KERNEL_PKG}")
  # Get kernel type such as: xen, trace etc.
  KERNEL_TYPE=$(echo $KERNEL_PKG | cut -d- -f2)

  if [ -f /etc/os-release ]; then
    FULL_RELEASE=$(awk -F'"' '/VERSION_ID/ { print $2 }' /etc/os-release)
    MAJOR_RELEASE=$(echo $FULL_RELEASE | cut -d. -f1)
    MINOR_RELEASE=$(echo $FULL_RELEASE | cut -d. -f2)
  else
    MAJOR_RELEASE=$(awk '/VERSION/ { print $3 }' /etc/SuSE-release)
    MINOR_RELEASE=$(awk '/PATCHLEVEL/ { print $3 }' /etc/SuSE-release)
  fi

  if [ $MAJOR_RELEASE -ge 12 ]; then
    PKG_ARGS="--oldpackage"
    KERNEL_PACKAGES="kernel-${KERNEL_TYPE}-devel-${KERNEL_PKG_VERSION} kernel-devel-${KERNEL_PKG_VERSION}"
  elif [ $MAJOR_RELEASE -ge 11 ] && [ $MINOR_RELEASE -ge 1 ]; then
    PKG_ARGS="--oldpackage"
    KERNEL_PACKAGES="kernel-${KERNEL_TYPE}-devel-${KERNEL_PKG_VERSION} kernel-source-${KERNEL_PKG_VERSION}"
  else
    PKG_ARGS=""
    KERNEL_PACKAGES="kernel-source-${KERNEL_PKG_VERSION}"
  fi

  if ! { rpm -q $KERNEL_PACKAGES; } >/dev/null 2>&1; then
    echo "Needed packages for running kernel ${KERNEL_VERSION} missing: ${KERNEL_PACKAGES}"
    echo "Try to install..."
    zypper -q install -y ${PKG_ARGS} ${KERNEL_PACKAGES}
  fi
}

check_kernelmodule() {
  modprobe --allow-unsupported-modules -V $AFS_KERNEL_MODULE >/dev/null 2>&1
  RETVAL=$?
  if [ $RETVAL -eq 0 ]; then
    MODPROBEOPT="--allow-unsupported-modules"
  else
    MODPROBEOPT=""
  fi
  modprobe $MODPROBEOPT $AFS_KERNEL_MODULE >/dev/null 2>&1
  RETVAL=$?
  [ $RETVAL -eq 0 ] && return 0 # Kernel module loaded, continue...
  echo -n "Attempting to recompile kernel module..."
  if lock_routine; then
    exlock_now || {
      echo
      echo " -> Lock-file $LOCKFILE exists! Will exit now."
      exit 0
    }
  fi
  echo
  KERNEL_VERSION=$(uname -r)
  KMOD_BUILDLOG=/tmp/openafs-kmod-build-$(date +%Y%m%d-%H%M).log
  echo "Build log for OpenAFS module: $(date)" >$KMOD_BUILDLOG
  if [ "$CHKKERNELPACK" == "true" ]; then
    check_kernelpackages $KERNEL_VERSION
  fi

  if [ -d /usr/src/kernel-modules/openafs/libafs_tree ]; then
    cd /usr/src/kernel-modules/openafs/libafs_tree || return 1
    make clean >>$KMOD_BUILDLOG 2>&1
    ./configure --with-linux-kernel-headers=/lib/modules/$KERNEL_VERSION/build >>$KMOD_BUILDLOG 2>&1
    make -j4 >>$KMOD_BUILDLOG 2>&1
    if [ $? -eq 0 ]; then
      MODULEDIR=/lib/modules/$KERNEL_VERSION/kernel/fs/openafs
      if [ -d $MODULEDIR ]; then # Clean out any occurance of old modules.
        rm -rf $MODULEDIR
      fi
      mkdir $MODULEDIR
      cp src/libafs/MODLOAD-$KERNEL_VERSION-*/libafs.ko $MODULEDIR/libafs.ko
      ln $MODULEDIR/libafs.ko $MODULEDIR/openafs.ko
      depmod -a >>$KMOD_BUILDLOG 2>&1
      modprobe $MODPROBEOPT $AFS_KERNEL_MODULE >>$KMOD_BUILDLOG 2>&1
      RETVAL=$?
    else
      RETVAL=1
    fi
    echo
    [ $RETVAL -eq 0 ] && rm -f $KMOD_BUILDLOG && echo "Build succeded!" && return 0
    echo
    echo "Failed to build kernel module."
    echo -n "See $KMOD_BUILDLOG for more details."
    return 1
  else
    echo
    echo -n "OpenAFS Kernel source not installed."
    return 1
  fi
}

rm_wrong_module() {
  module="$(modinfo -F filename $AFS_KERNEL_MODULE 2>/dev/null)"
  if [ -f "$module" ]; then
    mod_version=$(strings $module | awk '{ for (i=1; i<NF; i++) if ($i~/OpenAFS/) print $(i+1) }')
    pkg_version=$(fs --version | awk '{print $2}')
    if [ "$mod_version" != "$pkg_version" ]; then
      rm "$module"
      echo "Removed libafs.ko, version mismatch: $mod_version <-> $pkg_version"
    fi
  fi
}

package_update() {
  if [ "$UPDATE" == "true" ]; then
    echo "Checking for OpenAFS updates.."
    if lock_routine; then
      exlock_now || {
        echo
        echo " -> Lock-file $LOCKFILE exists! Will exit now."
        exit 0
      }
    fi
    echo
    zypper --no-gpg-checks refresh
    package_status=$(zypper --no-gpg-checks info openafs 2>/dev/null | grep ^Status | cut -d: -f2 | awk '{print $1}')
    if [ "$package_status" == "out-of-date" ]; then
      echo "Upgrading OpenAFS"
      zypper -q -V >/dev/null 2>&1
      RETVAL=$?
      if [ $RETVAL -eq 0 ]; then
        # --allow-vendor-change
        ZYPPEROPTS="-q"
      else
        ZYPPEROPTS=""
      fi
      zypper --no-gpg-checks $ZYPPEROPTS -n in openafs openafs-docs openafs-krb5-mit openafs-client openafs-kernel-source 2>/dev/null
      # Make a clean cache in case of package upgrades, even if option is not set.
      if [ "$CLEANCACHE" != "true" ]; then
        if [ "${CACHEDIR}" == "/usr/vice/cache" ] || [ "${CACHEDIR}" == "/var/cache/openafs" ]; then
          if [ -d ${CACHEDIR} ]; then
            echo "Cleaning up cache area ${CACHEDIR}/ ..."
            rm -rf ${CACHEDIR:?}/*
          fi
        else
          echo "Cache area CACHEDIR ${CACHEDIR} not set correctly for cleanup-job in startup-script."
        fi
      fi
    fi
  fi
}

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
  start)
    if noroot_check; then
      echo "Script has to be run as root"
      exit 4
    fi
    echo "Starting $DAEMON "
    mkdir -p $AFS
    if grep -q ^$AFS_KERNEL_MODULE /proc/modules; then
      echo -n "  -> $DAEMON already running "
    else
      # A configured zypper repository is needed for the package-update
      package_update
      rm_wrong_module
      if check_kernelmodule; then
        if ! pgrep -xf 'afsd' &>/dev/null; then
          if [ "$CLEANCACHE" == "true" ]; then
            if [ "${CACHEDIR}" == "/usr/vice/cache" ] || [ "${CACHEDIR}" == "/var/cache/openafs" ]; then
              if [ -d ${CACHEDIR} ]; then
                echo "Cleaning up cache area ${CACHEDIR}/ ..."
                rm -rf ${CACHEDIR:?}/*
              fi
            else
              echo "Cache area CACHEDIR ${CACHEDIR} not set correctly for cleanup-job in startup-script."
            fi
          fi
          $DAEMON_BIN $AFSD_ARGS
          RETVAL=$?
          if [ $RETVAL -eq 0 ]; then
            setsysname
            setsuid
            setnocrypt
            get_cell
            SETSERVERPREFS=/afs/$CELL/afsadm/sbin/afs_setserverprefs.sh
            # background job that should run after the AFS initialization...
            (
              sleep 60
              [ -x $SETSERVERPREFS ] && $SETSERVERPREFS
            ) </dev/null >/dev/null 2>&1 &
          else
            rc_failed 1
          fi
        fi
      else
        #modprobe failed
        rc_failed 5
      fi
    fi
    # Remember status and be verbose
    rc_status -v
    ;;
  stop)
    if noroot_check; then
      echo "Script has to be run as root"
      exit 4
    fi
    echo -n "Shutting down $DAEMON "
    if pgrep -xf 'afsd' &>/dev/null; then
      umount $AFS
      RETVAL=$?
      if [ $RETVAL -eq 0 ]; then
        $DAEMON_BIN -shutdown
      fi
    else
      echo -n " -> $DAEMON not running "
      RETVAL=0
    fi
    if [ $RETVAL -eq 0 ]; then
      if grep -q ^$AFS_KERNEL_MODULE /proc/modules; then
        rmmod $AFS_KERNEL_MODULE || rc_failed 1
      fi
    else
      rc_failed 1
    fi
    # rmtsys doesn't go away, so kill them all to be sure
    #killall $DAEMON_BIN > /dev/null 2>&1
    # Remember status and be verbose
    rc_status -v
    ;;
  stop-force)
    if noroot_check; then
      echo "Script has to be run as root"
      exit 4
    fi
    echo -n "Shutting down $DAEMON "
    if pgrep -xf 'afsd' &>/dev/null; then
      echo
      echo "Sending all processes using $AFS the TERM signal ..."
      killafs TERM
      echo "Sending all processes using $AFS the KILL signal ..."
      killafs KILL
      umount $AFS
      $DAEMON_BIN -shutdown
    fi
    if grep -q ^$AFS_KERNEL_MODULE /proc/modules; then
      rmmod $AFS_KERNEL_MODULE || rc_failed 1
    fi
    # rmtsys doesn't go away, so kill them all to be sure
    #killall $DAEMON_BIN > /dev/null 2>&1
    # Remember status and be verbose
    rc_status -v
    ;;
  try-restart)
    ## Stop the service and if this succeeds (i.e. the
    ## service was running before), start it again.
    $0 stop && $0 start

    # Remember status and be quiet
    rc_status
    ;;
  restart)
    ## Stop the service and regardless of whether it was
    ## running or not, start it again.
    $0 stop
    $0 start

    # Remember status and be quiet
    rc_status
    ;;
  status)
    echo -n "Checking for $DAEMON: "
    ## Check status with checkproc(8), if process is running
    ## checkproc will return with exit status 0.

    # Status has a slightly different for the status command:
    # 0 - service running
    # 1 - service dead, but /var/run/  pid  file exists
    # 2 - service dead, but /var/lock/ lock file exists
    # 3 - service not running

    # NOTE: checkproc returns LSB compliant status values.

    pgrep -xf 'afsd' &>/dev/null || rc_failed 3

    rc_status -v
    ;;
  check)
    echo -n "Checking $DAEMON "
    if pgrep -xf 'afsd' &>/dev/null; then
      get_cell
      HEALTHCHECK=/afs/$CELL/afsadm/bin/afs_site_health_check.sh
      if [ -x $HEALTHCHECK ]; then
        $HEALTHCHECK
      else
        echo -n $"Check-script not available: $HEALTHCHECK"
        echo
        RETVAL=1
      fi
    else
      echo -n " -> $DAEMON not running "
      RETVAL=0
    fi
    ;;
  *)
    echo "Usage: $0 {start|stop|stop-force|status|check|try-restart|restart}"
    exit 1
    ;;
esac
rc_exit
